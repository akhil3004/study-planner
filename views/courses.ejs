<%- include('partials/header') %>

<!-- Notification Permission Request Banner (add at the top of the body) -->
<div id="notificationPermissionBanner" style="display: none; background-color: #f8d7da; color: #721c24; padding: 10px; margin-bottom: 20px; border-radius: 5px; text-align: center;">
  <p>Enable notifications to receive reminders for your scheduled study sessions.</p>
  <button id="enableNotificationsBtn" style="background-color: #dc3545; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer; margin-left: 10px;">
    Enable Notifications
  </button>
</div>

<div class="container">
  <h1>Courses for <%= branch %> - Semester <%= semester %></h1>
  
  <div class="breadcrumb">
    <a href="/dashboard">Dashboard</a> > 
    <a href="/courses/semesters">Semesters</a> > 
    <a href="/courses/semester/<%= semester %>/branches">Semester <%= semester %></a> > 
    <span><%= branch %></span>
  </div>
  
  <% if (courses.length === 0) { %>
    <div class="alert alert-info">
      No courses found for this semester and branch. Please check back later.
    </div>
  <% } else { %>
    <div class="courses-container">
      <% courses.forEach(function(course) { %>
        <div class="course-card">
          <div class="course-header">
            <h2><%= course.name %></h2>
            <span class="course-code"><%= course.code %></span>
          </div>
          
          <div class="modules-container">
            <% course.modules.forEach(function(module, index) { %>
              <div class="module-card">
                <div class="module-header" onclick="toggleModule(this)">
                  <h3>Module <%= index + 1 %>: <%= module.name %></h3>
                  <i class="fas fa-chevron-down"></i>
                </div>
                <div class="module-content">
                  <div class="module-actions-container">
                    <div class="module-actions">
                      <button type="button" class="btn btn-primary start-study-btn" data-module-id="<%= module._id || module.name %>">
                        Start Study Session
                      </button>
                      <div class="study-session-buttons" style="display: none;">
                        <button type="button" class="btn btn-warning reschedule-btn" 
                                data-module-id="<%= module._id || module.name %>" 
                                data-module-name="<%= module.name %>"
                                data-course-name="<%= course.name %>">
                          Reschedule
                        </button>
                        <button type="button" class="btn btn-success finish-study-btn" data-module-id="<%= module._id || module.name %>">
                          Finish Session
                        </button>
                        <button type="button" class="btn btn-info take-quiz-btn" data-module-id="<%= module._id || module.name %>">
                          Take Quiz
                        </button>
                      </div>
                      <div class="study-timer" style="display: none;">
                        <span class="timer-display">00:00:00</span>
                      </div>
                    </div>
                  </div>
                  <div class="topics-list">
                    <% module.topics.forEach(topic => { %>
                      <div class="topic-item">
                        <input type="checkbox" 
                               id="topic-<%= module.name %>-<%= topic %>" 
                               class="topic-checkbox" 
                               value="<%= topic %>"
                               style="display: none;">
                        <label for="topic-<%= module.name %>-<%= topic %>" class="topic-label">
                          <%= topic %>
                        </label>
                      </div>
                    <% }); %>
                  </div>
                </div>
              </div>
            <% }); %>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>
</div>

<!-- Add this before the closing body tag -->
<!-- Reschedule Modal -->
<div id="rescheduleModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000;">
  <div style="background-color: white; padding: 20px; border-radius: 5px; width: 400px; max-width: 90%; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
    <h3 style="margin-bottom: 15px; font-size: 1.5rem; font-weight: bold;">Schedule Study Session</h3>
    <form id="rescheduleForm">
      <div style="margin-bottom: 20px;">
        <label style="display: block; margin-bottom: 5px;">Select Date and Time</label>
        <input type="datetime-local" id="sessionDateTime" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" required>
      </div>
      <div style="display: flex; justify-content: flex-end; gap: 10px;">
        <button type="button" class="cancel-reschedule" style="padding: 8px 16px; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
          Cancel
        </button>
        <button type="submit" style="padding: 8px 16px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
          Confirm
        </button>
      </div>
    </form>
  </div>
</div>

<script>
function toggleModule(header) {
  const moduleCard = header.parentElement;
  moduleCard.classList.toggle('expanded');
  const icon = header.querySelector('i');
  icon.classList.toggle('fa-chevron-down');
  icon.classList.toggle('fa-chevron-up');
}

document.addEventListener('DOMContentLoaded', function() {
  let startTimes = {};
  let timerIntervals = {};
  
  // Check if browser supports notifications
  if ('Notification' in window) {
    // Check if notification permission has been granted
    if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {
      // Show notification permission banner
      document.getElementById('notificationPermissionBanner').style.display = 'block';
    }
    
    // Handle enable notifications button click
    document.getElementById('enableNotificationsBtn').addEventListener('click', function() {
      requestNotificationPermission();
    });
  }
  
  // Function to request notification permission
  function requestNotificationPermission() {
    Notification.requestPermission().then(function(permission) {
      if (permission === 'granted') {
        // Hide the banner
        document.getElementById('notificationPermissionBanner').style.display = 'none';
        // Show confirmation
        showNotification('Notifications Enabled', 'You will now receive notifications for your scheduled study sessions.');
      }
    });
  }
  
  // Function to show a notification
  function showNotification(title, message) {
    if (Notification.permission === 'granted') {
      const notification = new Notification(title, {
        body: message,
        icon: '/img/logo.png' // Add your logo path here
      });
      
      notification.onclick = function() {
        window.focus();
        this.close();
      };
    }
  }
  
  // Schedule a local notification
  function scheduleLocalNotification(scheduledDate, moduleName, courseName) {
    const scheduleTime = new Date(scheduledDate).getTime();
    const currentTime = new Date().getTime();
    const timeUntilNotification = scheduleTime - currentTime - (30 * 60 * 1000); // 30 minutes before
    
    if (timeUntilNotification > 0) {
      // Store the notification data in localStorage
      const notificationData = {
        id: Date.now(),
        title: 'Study Session Reminder',
        message: `Your study session for ${moduleName} (${courseName}) is scheduled in 30 minutes.`,
        time: scheduleTime - (30 * 60 * 1000)
      };
      
      // Save to localStorage
      const savedNotifications = JSON.parse(localStorage.getItem('scheduledNotifications') || '[]');
      savedNotifications.push(notificationData);
      localStorage.setItem('scheduledNotifications', JSON.stringify(savedNotifications));
      
      // Schedule the notification
      setTimeout(function() {
        showNotification(notificationData.title, notificationData.message);
      }, timeUntilNotification);
      
      console.log(`Notification scheduled for ${new Date(notificationData.time).toLocaleString()}`);
    }
  }
  
  // Check for pending notifications on page load
  function checkPendingNotifications() {
    const savedNotifications = JSON.parse(localStorage.getItem('scheduledNotifications') || '[]');
    const currentTime = new Date().getTime();
    
    savedNotifications.forEach(notification => {
      const timeUntilNotification = notification.time - currentTime;
      
      if (timeUntilNotification > 0) {
        // Reschedule the notification
        setTimeout(function() {
          showNotification(notification.title, notification.message);
        }, timeUntilNotification);
        
        console.log(`Pending notification rescheduled for ${new Date(notification.time).toLocaleString()}`);
      }
    });
  }
  
  // Check for pending notifications on page load
  checkPendingNotifications();

  // Reschedule functionality
  const rescheduleModal = document.getElementById('rescheduleModal');
  const rescheduleForm = document.getElementById('rescheduleForm');
  let currentModuleId = null;
  let currentModuleName = null;
  let currentCourseName = null;

  // Study session buttons
  document.addEventListener('click', function(e) {
    // Stop event propagation for buttons
    if (e.target.closest('button')) {
      e.stopPropagation();
    }

    // Handle start study button clicks
    if (e.target.closest('.start-study-btn')) {
      const button = e.target.closest('.start-study-btn');
      const moduleId = button.dataset.moduleId;
      const moduleContent = button.closest('.module-content');
      const timerDisplay = moduleContent.querySelector('.timer-display');
      const topicsList = moduleContent.querySelector('.topics-list');
      
      // Show timer and study session buttons
      button.style.display = 'none';
      moduleContent.querySelector('.study-session-buttons').style.display = 'flex';
      moduleContent.querySelector('.study-timer').style.display = 'block';
      
      // Show checkboxes
      moduleContent.querySelectorAll('.topic-checkbox').forEach(checkbox => {
        checkbox.style.display = 'block';
      });
      
      startTimes[moduleId] = Date.now();
      
      // Start timer
      const timer = setInterval(() => {
        const elapsed = Date.now() - startTimes[moduleId];
        const hours = Math.floor(elapsed / 3600000);
        const minutes = Math.floor((elapsed % 3600000) / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        timerDisplay.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
      }, 1000);
      
      timerIntervals[moduleId] = timer;
    }

    // Handle reschedule button clicks
    if (e.target.closest('.reschedule-btn')) {
      e.preventDefault();
      e.stopPropagation();
      const button = e.target.closest('.reschedule-btn');
      currentModuleId = button.dataset.moduleId;
      currentModuleName = button.dataset.moduleName;
      currentCourseName = button.dataset.courseName;
      
      console.log('Reschedule button clicked:', { 
        currentModuleId, 
        currentModuleName, 
        currentCourseName 
      });
      
      // Set minimum date to current date and time
      const now = new Date();
      now.setMinutes(now.getMinutes() + 30); // Minimum 30 minutes from now
      const minDateTime = now.toISOString().slice(0, 16);
      document.getElementById('sessionDateTime').min = minDateTime;
      
      // Show modal with regular display property
      rescheduleModal.style.display = 'block';
    }

    // Handle cancel button clicks
    if (e.target.closest('.cancel-reschedule')) {
      rescheduleModal.style.display = 'none';
    }

    // Handle finish study button clicks
    if (e.target.closest('.finish-study-btn')) {
      const button = e.target.closest('.finish-study-btn');
      const moduleId = button.dataset.moduleId;
      const moduleContent = button.closest('.module-content');
      const timerDisplay = moduleContent.querySelector('.timer-display');
      const topicsList = moduleContent.querySelector('.topics-list');
      
      // Calculate study time
      const studyTime = Date.now() - startTimes[moduleId];
      
      // Clear timer
      clearInterval(timerIntervals[moduleId]);
      timerDisplay.textContent = '00:00:00';
      
      // Get completed topics
      const completedTopics = Array.from(topicsList.querySelectorAll('.topic-checkbox:checked'))
        .map(checkbox => checkbox.value);
      
      // Save progress
      saveStudyProgress(moduleId, completedTopics, studyTime, moduleContent);
    }

    // Handle take quiz button clicks
    if (e.target.closest('.take-quiz-btn')) {
      e.preventDefault();
      alert('Quiz functionality is under construction. Please check back later!');
    }
  });

  // Form submission handler
  rescheduleForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    const scheduledDate = document.getElementById('sessionDateTime').value;
    console.log('Submitting schedule:', { currentModuleId, currentModuleName, currentCourseName, scheduledDate });

    try {
      const response = await fetch('/courses/api/study-sessions/schedule', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          moduleId: currentModuleId,
          moduleName: currentModuleName,
          courseName: currentCourseName,
          scheduledDate: new Date(scheduledDate)
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to schedule session');
      }

      const result = await response.json();
      // Set browser notification for the session
      scheduleLocalNotification(scheduledDate, currentModuleName, currentCourseName);
      
      // Success message
      let message = 'Study session scheduled successfully! ';
      if (Notification.permission === 'granted') {
        message += 'You will receive a browser notification 30 minutes before the session.';
      } else {
        message += 'Enable browser notifications to receive reminders.';
      }
      
      alert(message);
      rescheduleModal.style.display = 'none';
    } catch (error) {
      console.error('Error scheduling session:', error);
      alert(error.message || 'Failed to schedule session. Please try again.');
    }
  });

  // Helper function to save study progress
  async function saveStudyProgress(moduleId, completedTopics, studyTime, moduleContent) {
    try {
      console.log('Saving progress with:', {
        moduleId,
        completedTopics,
        studyTime
      });

      const response = await fetch('/courses/api/study-progress', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          moduleId: moduleId,
          completedTopics: completedTopics,
          studyTime: studyTime
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Failed to save progress' }));
        throw new Error(errorData.error || 'Failed to save progress');
      }

      const data = await response.json();
      console.log('Progress saved successfully:', data);
      
      // Reset UI
      moduleContent.querySelector('.study-session-buttons').style.display = 'none';
      moduleContent.querySelector('.start-study-btn').style.display = 'block';
      moduleContent.querySelector('.study-timer').style.display = 'none';
      
      // Hide checkboxes
      moduleContent.querySelectorAll('.topic-checkbox').forEach(checkbox => {
        checkbox.style.display = 'none';
      });
      
      // Clear start time and timer interval
      delete startTimes[moduleId];
      delete timerIntervals[moduleId];
      
      alert('Study session completed successfully!');
    } catch (error) {
      console.error('Error saving progress:', error);
      alert(error.message || 'Failed to save study progress. Please try again.');
    }
  }
});
</script>

<style>
.module-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.module-actions {
  display: flex;
  gap: 1rem;
  align-items: center;
  flex-wrap: wrap;
}

.study-timer {
  font-size: 1.2rem;
  font-weight: bold;
  color: #2c3e50;
  background-color: #f8f9fa;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  border: 1px solid #dee2e6;
  min-width: 100px;
  text-align: center;
}

.timer-display {
  font-family: 'Courier New', monospace;
  letter-spacing: 1px;
}

.study-session-content {
  background-color: #f8f9fa;
  padding: 1rem;
  border-radius: 0.5rem;
  margin: 1rem 0;
}

.topic-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin: 0.5rem 0;
  padding: 0.5rem;
  background-color: #fff;
  border-radius: 0.25rem;
  transition: background-color 0.2s;
}

.topic-item:hover {
  background-color: #f8f9fa;
}

.topic-checkbox {
  width: 1.2rem;
  height: 1.2rem;
  cursor: pointer;
  accent-color: #28a745;
}

.topic-label {
  flex: 1;
  cursor: pointer;
  user-select: none;
  color: #495057;
}

.topic-item input[type="checkbox"]:checked + .topic-label {
  color: #28a745;
  text-decoration: line-through;
}

.topic-text {
  font-size: 1rem;
}

@media (max-width: 768px) {
  .module-actions {
    flex-direction: column;
    align-items: stretch;
  }
  
  .study-timer {
    margin: 0.5rem 0;
  }
}

/* Quiz Modal Styles */
.quiz-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.quiz-content {
  background-color: white;
  padding: 2rem;
  border-radius: 8px;
  max-width: 600px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
}

.quiz-content h2 {
  margin-bottom: 1rem;
  color: #333;
}

.quiz-content p {
  margin-bottom: 2rem;
  color: #666;
}

.question {
  margin-bottom: 2rem;
  padding: 1rem;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.question p {
  margin-bottom: 1rem;
  font-weight: 500;
}

.question label {
  display: block;
  margin-bottom: 0.5rem;
  padding: 0.5rem;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.question label:hover {
  background-color: #e9ecef;
}

.question input[type="radio"] {
  margin-right: 0.5rem;
}

.quiz-content button {
  width: 100%;
  margin-top: 1rem;
}

.study-session-buttons {
  display: flex;
  gap: 1rem;
  align-items: center;
  margin: 1rem 0;
}

.study-session-buttons .btn {
  padding: 0.5rem 1rem;
  border-radius: 0.25rem;
  font-weight: 500;
  transition: all 0.2s;
  min-width: 120px;
  text-align: center;
}

.study-session-buttons .btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.study-session-buttons .btn-warning {
  background-color: #ffc107;
  color: #000;
  border: 1px solid #ffc107;
}

.study-session-buttons .btn-success {
  background-color: #28a745;
  color: #fff;
  border: 1px solid #28a745;
}

.study-session-buttons .btn-info {
  background-color: #17a2b8;
  color: #fff;
  border: 1px solid #17a2b8;
}
</style>

<%- include('partials/footer') %>